{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Backend API for managing user profiles, authentication, analytics, and more.",
    "title": "Cash Advisor API",
    "contact": {
      "name": "Mikhail Vakhrushin",
      "email": "lstwrd@yandex.com"
    },
    "version": "1.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/analytics/expense": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new expense.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "Create an expense",
        "parameters": [
          {
            "description": "Expense object",
            "name": "expense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Expense"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Expense created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating expense",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/analytics/income": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new income.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "Create an income",
        "parameters": [
          {
            "description": "Income object",
            "name": "income",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Income"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Income created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating income",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/analytics/wealth_fund": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new wealth fund.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "Create a wealth fund",
        "parameters": [
          {
            "description": "Wealth fund object",
            "name": "wealthFund",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.WealthFund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Wealth fund created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating wealth fund",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/category/expense": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new expense category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "App"
        ],
        "summary": "Create an expense category",
        "parameters": [
          {
            "description": "Expense category object",
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ExpenseCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Expense category created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating expense category",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/category/income": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new income category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "App"
        ],
        "summary": "Create an income category",
        "parameters": [
          {
            "description": "Income category object",
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.IncomeCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Income category created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating income category",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/category/investment": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new investment category.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "App"
        ],
        "summary": "Create an investment category",
        "parameters": [
          {
            "description": "Investment category object",
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.InvestmentCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Investment category created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating investment category",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/connected-accounts/add": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new connected account.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "App"
        ],
        "summary": "Create a connected account",
        "parameters": [
          {
            "description": "ConnectedAccount object",
            "name": "ConnectedAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConnectedAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Connected account created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error adding connected account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/connected-accounts/delete": {
      "delete": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Delete an existing connected account.",
        "tags": [
          "App"
        ],
        "summary": "Delete a connected account",
        "parameters": [
          {
            "description": "ConnectedAccount object",
            "name": "ConnectedAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConnectedAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Connected account created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error adding connected account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/app/report": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Get a financial report .",
        "tags": [
          "App"
        ],
        "summary": "Exports report",
        "parameters": [
          {
            "description": "ConnectedAccount object",
            "name": "expense",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ConnectedAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Connected account created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error adding connected account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "description": "Login to the system and get an authentication token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Login to the system",
        "parameters": [
          {
            "description": "UserAuthenticationRequest object",
            "name": "loginRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.UserAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/login/reset": {
      "post": {
        "description": "Confirm the user's email using the provided token and confirmation code.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Confirm user email for password reset",
        "parameters": [
          {
            "description": "Confirm Email Request",
            "name": "confirmEmailRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.ConfirmEmailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmed successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload or Content-Type",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error confirming email or reseting password",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Logs out the user, terminating the session.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Logout the user",
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Register a new user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "parameters": [
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Name",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User registered successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error registering user",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/auth/register/confirm-email": {
      "post": {
        "description": "Confirm the user's email using the provided token and confirmation code.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Confirm user email",
        "parameters": [
          {
            "description": "Confirm Email Request",
            "name": "confirmEmailRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.ConfirmEmailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email confirmed successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload or Content-Type",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error confirming email or registering user",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/docs/swagger.json": {
      "get": {
        "description": "Get the Swagger JSON file.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Swagger"
        ],
        "summary": "Get Swagger JSON",
        "responses": {
          "200": {
            "description": "Swagger JSON retrieved successfully",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/history/add": {
      "post": {
        "description": "Add a new entry to the history.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "History"
        ],
        "summary": "Add history entry",
        "responses": {
          "200": {
            "description": "History entry added successfully",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/history/get": {
      "get": {
        "description": "Get a list of history entries.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "History"
        ],
        "summary": "Get history entries",
        "responses": {
          "200": {
            "description": "List of history entries",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/profile/get": {
      "get": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Get the user profile for the authenticated user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "summary": "Get user profile",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error getting user profile",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/profile/update-name": {
      "put": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Update the user profile for the authenticated user with a new name.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Profile"
        ],
        "summary": "Update user profile with name",
        "parameters": [
          {
            "description": "New name to be added to the profile",
            "name": "name",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error updating user profile",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/settings/subscription": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new subscription.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Settings"
        ],
        "summary": "Create a subscription",
        "parameters": [
          {
            "description": "Subscription object",
            "name": "subscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating subscription",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/support/request": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Send a support request to the technical support team.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Support"
        ],
        "summary": "Send support request",
        "parameters": [
          {
            "description": "Support request object",
            "name": "supportRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.SupportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Support request sent successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error sending support request",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/index.html": {
      "get": {
        "description": "Get the Swagger UI.",
        "produces": [
          "text/html"
        ],
        "tags": [
          "Swagger"
        ],
        "summary": "Get Swagger UI",
        "responses": {
          "200": {
            "description": "Swagger UI retrieved successfully",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/json": {
      "get": {
        "description": "Get the Swagger JSON file.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Swagger"
        ],
        "summary": "Get Swagger JSON",
        "responses": {
          "200": {
            "description": "Swagger JSON retrieved successfully",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/ui": {
      "get": {
        "description": "Get the Swagger UI.",
        "produces": [
          "text/html"
        ],
        "tags": [
          "Swagger"
        ],
        "summary": "Get Swagger UI",
        "responses": {
          "200": {
            "description": "Swagger UI retrieved successfully",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/tracker/goal": {
      "post": {
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Create a new goal.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tracker"
        ],
        "summary": "Create a goal",
        "parameters": [
          {
            "description": "Goal object",
            "name": "goal",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.Goal"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Goal created successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request payload",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "User not authenticated",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Error creating goal",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "auth.ConfirmEmailRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "auth.UserAuthenticationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "handlers.SupportRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.ConnectedAccount": {
      "type": "object",
      "properties": {
        "account_number": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "bank_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.Expense": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "category_id": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "planned": {
          "type": "boolean"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.ExpenseCategory": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.Goal": {
      "type": "object",
      "properties": {
        "current_state": {
          "type": "number"
        },
        "goal": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "need": {
          "type": "number"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.Income": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "category_id": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "planned": {
          "type": "boolean"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.IncomeCategory": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.InvestmentCategory": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.Subscription": {
      "type": "object",
      "properties": {
        "end_date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "start_date": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.WealthFund": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "planned": {
          "$ref": "#/definitions/models.WelfareFund"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "models.WelfareFund": {
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enum-varnames": [
        "Planned",
        "Unplanned"
      ]
    },
    "models.FinHealth": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "income_score": {
          "type": "integer"
        },
        "expense_score": {
          "type": "integer"
        },
        "investment_score": {
          "type": "integer"
        },
        "obligation_score": {
          "type": "integer"
        },
        "plan_score": {
          "type": "integer"
        },
        "total_score": {
          "type": "integer"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "profile.UserProfile": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "analytics": {
          "$ref": "#/definitions/Analytics"
        },
        "tracker": {
          "$ref": "#/definitions/Tracker"
        },
        "more": {
          "$ref": "#/definitions/More"
        },
        "userID": {
          "type": "string"
        }
      }
    },
    "Analytics": {
      "type": "object",
      "properties": {
        "income": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Income"
          }
        },
        "expense": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Expense"
          }
        },
        "wealthFund": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.WealthFund"
          }
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "start_date": {
          "type": "string",
          "format": "date"
        },
        "end_date": {
          "type": "string",
          "format": "date"
        },
        "is_active": {
          "type": "boolean"
        }
      }
    },
    "TrackingState": {
      "type": "object",
      "properties": {
        "state": {
          "type": "number"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "App": {
      "type": "object",
      "properties": {
        "connectedAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectedAccount"
          }
        },
        "categorySettings": {
          "$ref": "#/definitions/CategorySettings"
        },
        "operationArchive": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        }
      }
    },
    "CategorySettings": {
      "type": "object",
      "properties": {
        "expenseCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpenseCategory"
          }
        },
        "incomeCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncomeCategory"
          }
        },
        "investmentCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestmentCategory"
          }
        }
      }
    },
    "Operation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "date": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ExpenseCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "IncomeCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "InvestmentCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "is_constant": {
          "type": "boolean"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "ConnectedAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "bank_id": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        }
      }
    },
    "Tracker": {
      "type": "object",
      "properties": {
        "trackingState": {
          "$ref": "#/definitions/TrackingState"
        },
        "models.goal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Goal"
          }
        },
        "finHealth": {
          "$ref": "#/definitions/models.FinHealth"
        }
      }
    },
    "More": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/App"
        },
        "settings": {
          "$ref": "#/definitions/Settings"
        }
      }
    },
    "Settings": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "$ref": "#/definitions/Subscription"
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}