{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Backend API for managing user profiles, authentication, analytics, and more.",
        "title": "Cash Advisor API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Mikhail Vakhrushin",
            "email": "wachrusz@gmail.com"
        },
        "version": "0.1"
    },
    "host": "localhost:8080",
    "basePath": "/v1",
    "paths": {
        "/analytics/expense": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update an existing expense. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Update the expense",
                "parameters": [
                    {
                        "description": "Expense object",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.ExpenseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "expense updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "expense not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating expense",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete the existing expense.",
                "tags": [
                    "Analytics"
                ],
                "summary": "Delete the expense",
                "parameters": [
                    {
                        "description": "Expense id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Expense deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting expense",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/analytics/expenses": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new expense record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Create a expense",
                "parameters": [
                    {
                        "description": "Expense object",
                        "name": "expense",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.ExpenseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created an expense",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating expense",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/analytics/income": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update an existing income. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Update the income",
                "parameters": [
                    {
                        "description": "income object",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.IncomeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "income updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "income not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating income",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new income record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Create an income",
                "parameters": [
                    {
                        "description": "Income object",
                        "name": "income",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.IncomeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Income created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating income",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete the existing income.",
                "tags": [
                    "Analytics"
                ],
                "summary": "Delete the income",
                "parameters": [
                    {
                        "description": "income id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "income deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting income",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/analytics/wealth_fund": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update an existing wealth fund. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Update the wealth fund",
                "parameters": [
                    {
                        "description": "wealth fund object",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.WealthFundRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "wealth fund updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "wealth fund not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating wealth fund",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new wealth fund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Create a wealth fund",
                "parameters": [
                    {
                        "description": "Wealth fund object",
                        "name": "wealthFund",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.WealthFundRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Wealth fund created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating wealth fund",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete the existing wealth fund.",
                "tags": [
                    "Analytics"
                ],
                "summary": "Delete the wealth fund",
                "parameters": [
                    {
                        "description": "wealth fund id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "wealth fund deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting wealth fund",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/accounts": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update an existing connected account. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "Update a connected account",
                "parameters": [
                    {
                        "description": "ConnectedAccount object",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.ConnectedAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connected account updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Connected account not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating connected account",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new connected account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "Create a connected account",
                "parameters": [
                    {
                        "description": "ConnectedAccount object",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.ConnectedAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Connected account created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error adding connected account",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete an existing connected account.",
                "tags": [
                    "App"
                ],
                "summary": "Delete a connected account",
                "parameters": [
                    {
                        "description": "ConnectedAccount id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Connected account deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting connected account",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/category/expense": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Creates a new expense category in the database and returns its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "CreateExpenseCategoryHandler an expense category",
                "parameters": [
                    {
                        "description": "Expense category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.ExpenseCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Expense category created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating expense category",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/category/income": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new income category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "Create an income category",
                "parameters": [
                    {
                        "description": "Income category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.IncomeCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Income category created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating income category",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/category/investment": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new investment category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "Create an investment category",
                "parameters": [
                    {
                        "description": "Investment category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.InvestmentCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Investment category created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating investment category",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "LoginUserHandler to the system and get an authentication RefreshToken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "LoginUserHandler to the system",
                "parameters": [
                    {
                        "description": "UserAuthenticationRequest object",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.UserAuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "LoginUserHandler successful",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/confirm": {
            "post": {
                "description": "Confirms the user's email for login using a RefreshToken and confirmation code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Confirm email for login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор устройства",
                        "name": "X-Device-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Confirmation request",
                        "name": "confirmRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.ConfirmEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully confirmed email for login",
                        "schema": {
                            "$ref": "#/definitions/v1.ConfirmResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing RefreshToken",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid code",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.CodeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Logs out the user, terminating the session.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "LogoutUserHandler the user",
                "responses": {
                    "200": {
                        "description": "LogoutUserHandler successful",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/password": {
            "put": {
                "description": "This endpoint enables users to change their password by providing their email, new password, and a valid reset token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Change password for recovery",
                "parameters": [
                    {
                        "description": "Password reset request with email, new password, and reset token",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.UserPasswordReset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request: empty fields, invalid email, or password too short",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired reset token",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint allows users to request a password reset by providing their email. If the email is valid, a reset token will be sent to it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password request with email",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sent email with reset password token",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Content-Type or invalid email",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/password/confirm": {
            "post": {
                "description": "Confirms the password reset process using a RefreshToken and code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Confirm password reset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique device id",
                        "name": "X-Device-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Confirmation request",
                        "name": "confirmRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.ConfirmEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully confirmed password reset",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with remaining attempts",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.CodeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows users to refresh their access and refresh tokens using an existing refresh RefreshToken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh authentication tokens",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed tokens",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.DoubleTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Content-Type or request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user and send confirmation email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "confirmRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.UserAuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register/confirm": {
            "post": {
                "description": "Confirms the user's email using a RefreshToken and confirmation code during registration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Confirm email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор устройства",
                        "name": "X-Device-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Confirmation request",
                        "name": "confirmRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/token.ConfirmEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully confirmed email",
                        "schema": {
                            "$ref": "#/definitions/v1.ConfirmResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing RefreshToken",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid code",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.CodeError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/tokens": {
            "delete": {
                "description": "This endpoint allows users to delete authentication tokens either by email or device ID. Only one of the parameters should be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Delete authentication tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "deviceID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted tokens",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request: blank fields or both email and deviceID provided",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/tokens/amount": {
            "get": {
                "description": "This endpoint returns the number of token pairs (active sessions) associated with the provided email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get token pairs amount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully got the amount of token pairs",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.AmountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request: blank fields are not allowed",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/expenses/delta": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the expenditure delta, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate expenditure delta",
                "responses": {
                    "200": {
                        "description": "Successfully calculated expenditure delta",
                        "schema": {
                            "$ref": "#/definitions/v1.DeltaResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating expenditure delta",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/expenses/propensity": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the expense propensity, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate expense propensity",
                "responses": {
                    "200": {
                        "description": "Successfully calculated expense propensity",
                        "schema": {
                            "$ref": "#/definitions/v1.PropensityResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating expenditure delta",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/investments/ratio/investments_to_fund": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the monthly investments to fund ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate monthly investments to fund ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated investments to fund",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating investments to fund ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/investments/ratio/investments_to_savings": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the monthly investments to savings ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate monthly investments to savings ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated investments to savings",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating investments to savings ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/loans/propensity": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate their loans propensity, providing insight into their financial health and spending behavior.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate loans propensity",
                "responses": {
                    "200": {
                        "description": "Successfully calculated loans propensity",
                        "schema": {
                            "$ref": "#/definitions/v1.PropensityResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating loans propensity",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/loans/ratio/loans_to_assets": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the monthly loans to assets ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate monthly loans to assets ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated loans to assets ratio",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating loans to assets ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/savings/delta": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the savings delta, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate savings delta",
                "responses": {
                    "200": {
                        "description": "Successfully calculated savings delta",
                        "schema": {
                            "$ref": "#/definitions/v1.DeltaResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating savings delta",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/savings/ratio/illiquid": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the illiquid fund ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate illiquid fund ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated illiquid fund ratio",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating illiquid fund ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/savings/ratio/liquid": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the liquid fund ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate liquid fund ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated liquid fund ratio",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating liquid fund ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fin_health/savings/ratio/savings_to_income": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to calculate the savings to income ratio, providing insight into their financial health.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Financial Health"
                ],
                "summary": "Calculate savings to income ratio",
                "responses": {
                    "200": {
                        "description": "Successfully calculated savings to income ratio",
                        "schema": {
                            "$ref": "#/definitions/v1.RatioResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while calculating savings to income ratio",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/history/add": {
            "post": {
                "description": "Create a new entry to the history.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Create history entry",
                "responses": {
                    "200": {
                        "description": "History entry added successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/history/get": {
            "get": {
                "description": "Get a list of history entries.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history entries",
                "responses": {
                    "200": {
                        "description": "List of history entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/rps": {
            "get": {
                "description": "This streaming handler returns the number of requests in the last second and details by IP for rate limiting and usage monitoring.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Returns the number of requests in the last second as a stream",
                "responses": {
                    "200": {
                        "description": "Successful response with request count",
                        "schema": {
                            "$ref": "#/definitions/v1.RequestCountResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/openbanking/accounts/get": {
            "get": {
                "description": "Fetches a list of user accounts from the Open Banking API using the provided authorization token and API URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenBanking"
                ],
                "summary": "Retrieve user accounts",
                "parameters": [
                    {
                        "description": "Authorization token for Open Banking",
                        "name": "Auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openbanking.Auth"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API base URL for Open Banking",
                        "name": "api_url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched accounts",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing URL parameter",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal service error while fetching accounts",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/openbanking/consent/create": {
            "post": {
                "description": "Initiates the consent process for accessing user accounts using the provided authorization token and API URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenBanking"
                ],
                "summary": "Create consent",
                "parameters": [
                    {
                        "description": "Authorization token for Open Banking",
                        "name": "Auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openbanking.Auth"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API base URL for Open Banking",
                        "name": "api_url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created consent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing URL parameter",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal service error while creating consent",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/openbanking/consent/delete": {
            "delete": {
                "description": "Deletes existing consent for accessing user accounts using the provided authorization token, consent ID, and API URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenBanking"
                ],
                "summary": "Delete consent",
                "parameters": [
                    {
                        "description": "Authorization token for Open Banking",
                        "name": "Auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openbanking.Auth"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API base URL for Open Banking",
                        "name": "api_url",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Consent ID to delete",
                        "name": "consent_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted consent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload, missing parameters, or incorrect ID",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal service error while deleting consent",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/openbanking/consent/get": {
            "get": {
                "description": "Fetches consent information using the provided authorization token, consent ID, and API URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OpenBanking"
                ],
                "summary": "Retrieve consent",
                "parameters": [
                    {
                        "description": "Authorization token for Open Banking",
                        "name": "Auth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openbanking.Auth"
                        }
                    },
                    {
                        "type": "string",
                        "description": "API base URL for Open Banking",
                        "name": "api_url",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Consent ID to retrieve",
                        "name": "consent_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched consent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload, missing parameters, or incorrect ID",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal service error while fetching consent",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get the user profile for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/v1.ProfileResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting user profile",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/analytics": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to retrieve profile analytics data, filtered by date range and pagination parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get profile analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency code for analytics data (e.g., USD, EUR)",
                        "name": "X-Currency",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date for analytics data (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for analytics data (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved analytics data",
                        "schema": {
                            "$ref": "#/definitions/v1.ProfileAnalyticsResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching analytics data",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/archive": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to retrieve their archived operations with optional pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get operation archive",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved operation archive",
                        "schema": {
                            "$ref": "#/definitions/v1.ProfileArchiveResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching operation archive",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/more": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to retrieve additional profile data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get profile additional data",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved additional profile data",
                        "schema": {
                            "$ref": "#/definitions/v1.ProfileMoreResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching additional data",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/name": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update the user profile for the authenticated user with a new name and surname.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update user profile with name",
                "parameters": [
                    {
                        "description": "New name to be added to the profile",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating user profile",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/tracker": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "This endpoint allows authenticated users to retrieve tracker data, with optional pagination parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get profile tracker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency code for tracker data (e.g., USD, EUR)",
                        "name": "X-Currency",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved tracker data",
                        "schema": {
                            "$ref": "#/definitions/v1.ProfileTrackerResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error while fetching tracker data",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settings/subscription": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates an existing subscription. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Update the subscription",
                "parameters": [
                    {
                        "description": "Subscription object",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "subscription updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating subscription",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new subscription record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Create a subscription",
                "parameters": [
                    {
                        "description": "Subscription object",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscription created successfully",
                        "schema": {
                            "$ref": "#/definitions/v1.EndTimeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating subscription",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete the existing subscription.",
                "tags": [
                    "Settings"
                ],
                "summary": "Delete the subscription",
                "parameters": [
                    {
                        "description": "Subscription id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Subscription deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting subscription",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/support/request": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Send a support request to the technical support team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Support"
                ],
                "summary": "Send support request",
                "parameters": [
                    {
                        "description": "Support request object",
                        "name": "supportRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.SupportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Support request sent successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error sending support request",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tracker/goal": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Creates new transaction for the goal.",
                "tags": [
                    "Tracker"
                ],
                "summary": "Create goal transaction",
                "parameters": [
                    {
                        "description": "goal transaction",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.GoalTransactionReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "goal transactions created successfully",
                        "schema": {
                            "$ref": "#/definitions/v1.GoalDetailsResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting goal details",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates an existing goal. There is no need to fill user_id field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracker"
                ],
                "summary": "Update the goal",
                "parameters": [
                    {
                        "description": "Goal object",
                        "name": "goal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.GoalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Goal updated successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Goal not found",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating goal",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new goal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracker"
                ],
                "summary": "Create a goal",
                "parameters": [
                    {
                        "description": "Goal object",
                        "name": "goal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.GoalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Goal created successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating goal",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete the existing goal.",
                "tags": [
                    "Tracker"
                ],
                "summary": "Delete the goal",
                "parameters": [
                    {
                        "description": "goal id",
                        "name": "ConnectedAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.IdRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "goal deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting goal",
                        "schema": {
                            "$ref": "#/definitions/jsonresponse.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "categories.Analytics": {
            "type": "object",
            "properties": {
                "expense": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Expense"
                    }
                },
                "income": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Income"
                    }
                },
                "wealth_fund": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.WealthFund"
                    }
                }
            }
        },
        "categories.More": {
            "type": "object",
            "properties": {
                "app": {
                    "$ref": "#/definitions/repository.App"
                },
                "settings": {
                    "$ref": "#/definitions/repository.Settings"
                }
            }
        },
        "jsonresponse.AmountResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.CodeError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "lock_duration": {
                    "type": "integer"
                },
                "remaining_attempts": {
                    "type": "integer"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.DoubleTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_life_time": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "refresh_token_life_time": {
                    "type": "integer"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.IdRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "TODO: int64 type",
                    "type": "string"
                }
            }
        },
        "jsonresponse.IdResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.Metadata": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jsonresponse.TokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.ConnectedAccount": {
            "type": "object",
            "properties": {
                "account_currency": {
                    "type": "string"
                },
                "account_name": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "account_state": {
                    "type": "number"
                },
                "account_type": {
                    "type": "string"
                },
                "bank_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Expense": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bank_account": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "planned": {
                    "type": "boolean"
                },
                "sent_to": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Goal": {
            "type": "object",
            "properties": {
                "additional_months": {
                    "type": "integer"
                },
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_completed": {
                    "type": "boolean"
                },
                "months": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.GoalDetails": {
            "type": "object",
            "properties": {
                "current_need": {
                    "type": "number"
                },
                "current_payment": {
                    "type": "number"
                },
                "gathered": {
                    "type": "number"
                },
                "goal": {
                    "$ref": "#/definitions/models.Goal"
                },
                "month": {
                    "type": "integer"
                },
                "monthly_payment": {
                    "type": "number"
                }
            }
        },
        "models.GoalTrackerInfo": {
            "type": "object",
            "properties": {
                "goal": {
                    "$ref": "#/definitions/models.Goal"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GoalTransaction"
                    }
                }
            }
        },
        "models.GoalTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bank_account": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "goal_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "planned": {
                    "type": "boolean"
                }
            }
        },
        "models.Income": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bank_account": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "planned": {
                    "type": "boolean"
                },
                "sender": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "start_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.WealthFund": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "bank_account": {
                    "type": "string"
                },
                "category_id": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "planned": {
                    "$ref": "#/definitions/models.WelfareFund"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.WelfareFund": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "Planned",
                "Unplanned"
            ]
        },
        "openbanking.Auth": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "repository.App": {
            "type": "object",
            "properties": {
                "category_settings": {
                    "$ref": "#/definitions/repository.CategorySettings"
                },
                "connected_accounts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/models.ConnectedAccount"
                        }
                    }
                }
            }
        },
        "repository.CategorySettings": {
            "type": "object",
            "properties": {
                "expense_categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.ExpenseCategory"
                    }
                },
                "income_categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.IncomeCategory"
                    }
                },
                "investment_category": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.InvestmentCategory"
                    }
                }
            }
        },
        "repository.ExpenseCategory": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_constant": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "repository.GetTokenRequest": {
            "type": "object",
            "properties": {
                "auth_url": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                }
            }
        },
        "repository.IncomeCategory": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_constant": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "repository.InvestmentCategory": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_constant": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "repository.Operation": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "category": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "repository.Settings": {
            "type": "object",
            "properties": {
                "subscriptions": {
                    "$ref": "#/definitions/models.Subscription"
                }
            }
        },
        "token.ConfirmEmailRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "token.Details": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "user.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "user.UserProfile": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "surname": {
                    "description": "*changed",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "v1.ConfirmResponse": {
            "type": "object",
            "properties": {
                "access_token_life_time": {
                    "type": "integer"
                },
                "device_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token_life_time": {
                    "type": "integer"
                },
                "status_code": {
                    "type": "integer"
                },
                "token_details": {
                    "$ref": "#/definitions/token.Details"
                }
            }
        },
        "v1.ConnectedAccountRequest": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/models.ConnectedAccount"
                }
            }
        },
        "v1.DeltaResponse": {
            "type": "object",
            "properties": {
                "delta": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.EndTimeResponse": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.ExpenseRequest": {
            "type": "object",
            "properties": {
                "expense": {
                    "$ref": "#/definitions/models.Expense"
                }
            }
        },
        "v1.GoalDetailsResp": {
            "type": "object",
            "properties": {
                "details": {
                    "$ref": "#/definitions/models.GoalDetails"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.GoalRequest": {
            "type": "object",
            "properties": {
                "goal": {
                    "$ref": "#/definitions/models.Goal"
                }
            }
        },
        "v1.GoalTransactionReq": {
            "type": "object",
            "properties": {
                "transaction": {
                    "$ref": "#/definitions/models.GoalTransaction"
                }
            }
        },
        "v1.IncomeRequest": {
            "type": "object",
            "properties": {
                "income": {
                    "$ref": "#/definitions/models.Income"
                }
            }
        },
        "v1.ProfileAnalyticsResponse": {
            "type": "object",
            "properties": {
                "analytics": {
                    "$ref": "#/definitions/categories.Analytics"
                },
                "currency": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.ProfileArchiveResponse": {
            "type": "object",
            "properties": {
                "archive": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.Operation"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.ProfileMoreResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "more": {
                    "$ref": "#/definitions/categories.More"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.ProfileResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "profile": {
                    "$ref": "#/definitions/user.UserProfile"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.ProfileTrackerResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "tracker": {
                    "$ref": "#/definitions/v1.Tracker"
                }
            }
        },
        "v1.PropensityResponse": {
            "type": "object",
            "properties": {
                "expense_propensity": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.RatioResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ratio": {
                    "type": "number"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "v1.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "v1.RequestCountResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Детали запросов по IP",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "local_id": {
                    "description": "Идентификатор локального сервера",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Временная метка ответа",
                    "type": "string"
                },
                "total_rps": {
                    "description": "Общее количество запросов за последнюю секунду",
                    "type": "integer"
                }
            }
        },
        "v1.SubscriptionRequest": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/definitions/models.Subscription"
                }
            }
        },
        "v1.SupportRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "request_id": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "v1.Tracker": {
            "type": "object",
            "properties": {
                "goals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GoalTrackerInfo"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/jsonresponse.Metadata"
                }
            }
        },
        "v1.UserAuthenticationRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1.UserPasswordReset": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "reset_token": {
                    "type": "string"
                }
            }
        },
        "v1.WealthFundRequest": {
            "type": "object",
            "properties": {
                "wealth_fund": {
                    "$ref": "#/definitions/models.WealthFund"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "description": "To authorize, write \"Bearer \u003ctoken\u003e\" in header Authorization",
            "type": "apiKey",
            "name": "Bearer Authorization",
            "in": "header"
        }
    }
}