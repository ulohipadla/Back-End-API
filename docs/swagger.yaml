basePath: /v1
definitions:
  models.ConnectedAccount:
    properties:
      account_number:
        type: string
      account_type:
        type: string
      bank_id:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  models.Expense:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        type: boolean
      sent_to:
        type: string
      user_id:
        type: string
    type: object
  models.ExpenseCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  models.Goal:
    properties:
      current_state:
        type: number
      goal:
        type: string
      id:
        type: string
      need:
        type: number
      user_id:
        type: string
    type: object
  models.Income:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        type: boolean
      sender:
        type: string
      user_id:
        type: string
    type: object
  models.IncomeCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  models.InvestmentCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  models.Subscription:
    properties:
      end_date:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      start_date:
        type: string
      user_id:
        type: string
    type: object
  models.WealthFund:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        $ref: '#/definitions/models.WelfareFund'
      user_id:
        type: string
    type: object
  models.WelfareFund:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Planned
    - Unplanned
  token.ConfirmEmailRequest:
    properties:
      code:
        type: string
      token:
        type: string
    type: object
  user.UserAuthenticationRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  v1.SupportRequest:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
      request_id:
        type: integer
      subject:
        type: string
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: wachrusz@gmail.com
    name: Mikhail Vakhrushin
  description: Backend API for managing user profiles, authentication, analytics,
    and more.
  termsOfService: http://swagger.io/terms/
  title: Cash Advisor API
  version: "0.1"
paths:
  /analytics/income:
    post:
      consumes:
      - application/json
      description: Create a new income record.
      parameters:
      - description: Income object
        in: body
        name: income
        required: true
        schema:
          $ref: '#/definitions/models.Income'
      produces:
      - application/json
      responses:
        "201":
          description: Income created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error creating income
          schema:
            type: string
      security:
      - JWT: []
      summary: Create an income
      tags:
      - Analytics
  /analytics/wealth_fund:
    post:
      consumes:
      - application/json
      description: Create a new wealth fund.
      parameters:
      - description: Wealth fund object
        in: body
        name: wealthFund
        required: true
        schema:
          $ref: '#/definitions/models.WealthFund'
      produces:
      - application/json
      responses:
        "201":
          description: Wealth fund created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error creating wealth fund
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a wealth fund
      tags:
      - Analytics
  /app/category/expense:
    post:
      consumes:
      - application/json
      description: Creates a new expense category in the database and returns its
        ID.
      parameters:
      - description: Expense category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.ExpenseCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Expense category created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Error creating expense category
          schema:
            type: string
      security:
      - JWT: []
      summary: CreateExpenseCategoryHandler an expense category
      tags:
      - Categories
  /app/category/income:
    post:
      consumes:
      - application/json
      description: Create a new income category.
      parameters:
      - description: Income category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.IncomeCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Income category created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Error creating income category
          schema:
            type: string
      security:
      - JWT: []
      summary: Create an income category
      tags:
      - Categories
  /app/category/investment:
    post:
      consumes:
      - application/json
      description: Create a new investment category.
      parameters:
      - description: Investment category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.InvestmentCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Investment category created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Error creating investment category
          schema:
            type: string
      security:
      - JWT: []
      summary: Create an investment category
      tags:
      - Categories
  /app/connected-accounts/add:
    post:
      consumes:
      - application/json
      description: Create a new connected account.
      parameters:
      - description: ConnectedAccount object
        in: body
        name: ConnectedAccount
        required: true
        schema:
          $ref: '#/definitions/models.ConnectedAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Connected account created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error adding connected account
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a connected account
      tags:
      - App
  /app/connected-accounts/delete:
    delete:
      description: Delete an existing connected account.
      parameters:
      - description: ConnectedAccount object
        in: body
        name: ConnectedAccount
        required: true
        schema:
          $ref: '#/definitions/models.ConnectedAccount'
      responses:
        "201":
          description: Connected account deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error deleting connected account
          schema:
            type: string
      security:
      - JWT: []
      summary: Delete a connected account
      tags:
      - App
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the system and get an authentication token.
      parameters:
      - description: UserAuthenticationRequest object
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/user.UserAuthenticationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login to the system
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logs out the user, terminating the session.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - JWT: []
      summary: Logout the user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system.
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      - description: Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /email/confirm:
    post:
      consumes:
      - application/json
      description: Confirms the user's email using a token and confirmation code.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed email
          schema:
            type: string
        "400":
          description: Invalid request or missing token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Confirm email
      tags:
      - Email
  /email/confirm-login:
    post:
      consumes:
      - application/json
      description: Confirms the user's email for login using a token and confirmation
        code.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed email for login
          schema:
            type: string
        "400":
          description: Invalid request or missing token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Confirm email for login
      tags:
      - Email
  /email/get-confirmation-code:
    get:
      description: Retrieves the confirmation code for the provided email.
      parameters:
      - description: Email address
        in: query
        name: email
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved confirmation code
          schema:
            type: string
        "400":
          description: Invalid email
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get confirmation code
      tags:
      - Email
  /email/send-confirmation:
    post:
      description: Sends a confirmation email with a generated code.
      parameters:
      - description: Email address
        in: query
        name: email
        required: true
        type: string
      - description: Token
        in: query
        name: token
        required: true
        type: string
      responses:
        "200":
          description: Successfully sent confirmation code
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Send confirmation email
      tags:
      - Email
  /expenses:
    post:
      consumes:
      - application/json
      description: Create a new expense record.
      parameters:
      - description: Expense object
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/models.Expense'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created an expense
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error creating expense
          schema:
            type: string
      summary: Create an expense
      tags:
      - Expenses
  /history/add:
    post:
      consumes:
      - application/json
      description: Add a new entry to the history.
      produces:
      - application/json
      responses:
        "200":
          description: History entry added successfully
          schema:
            type: string
      summary: Add history entry
      tags:
      - History
  /history/get:
    get:
      description: Get a list of history entries.
      produces:
      - application/json
      responses:
        "200":
          description: List of history entries
          schema:
            items:
              type: string
            type: array
      summary: Get history entries
      tags:
      - History
  /password/reset-confirm:
    post:
      consumes:
      - application/json
      description: Confirms the password reset process using a token and code.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed password reset
          schema:
            type: string
        "400":
          description: Invalid request or missing token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Confirm password reset
      tags:
      - Password
  /profile/get:
    get:
      description: Get the user profile for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error getting user profile
          schema:
            type: string
      security:
      - JWT: []
      summary: Get user profile
      tags:
      - Profile
  /profile/update-name:
    put:
      consumes:
      - application/json
      description: Update the user profile for the authenticated user with a new name
        and surname.
      parameters:
      - description: New name to be added to the profile
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error updating user profile
          schema:
            type: string
      security:
      - JWT: []
      summary: Update user profile with name
      tags:
      - Profile
  /settings/subscription:
    post:
      consumes:
      - application/json
      description: Create a new subscription record.
      parameters:
      - description: Subscription object
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: Subscription created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Error creating subscription
          schema:
            type: string
      summary: Create a subscription
      tags:
      - Settings
  /support/request:
    post:
      consumes:
      - application/json
      description: Send a support request to the technical support team.
      parameters:
      - description: Support request object
        in: body
        name: supportRequest
        required: true
        schema:
          $ref: '#/definitions/v1.SupportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Support request sent successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error sending support request
          schema:
            type: string
      summary: Send support request
      tags:
      - Support
  /tracker/goal:
    post:
      consumes:
      - application/json
      description: Create a new goal.
      parameters:
      - description: Goal object
        in: body
        name: goal
        required: true
        schema:
          $ref: '#/definitions/models.Goal'
      produces:
      - application/json
      responses:
        "201":
          description: Goal created successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Error creating goal
          schema:
            type: string
      summary: Create a goal
      tags:
      - Tracker
schemes:
- https
securityDefinitions:
  JWT:
    description: To authorize,
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
