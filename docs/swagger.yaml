basePath: /v1
definitions:
  categories.Analytics:
    properties:
      expense:
        items:
          $ref: '#/definitions/repository.Expense'
        type: array
      income:
        items:
          $ref: '#/definitions/repository.Income'
        type: array
      wealth_fund:
        items:
          $ref: '#/definitions/repository.WealthFund'
        type: array
    type: object
  categories.More:
    properties:
      app:
        $ref: '#/definitions/repository.App'
      settings:
        $ref: '#/definitions/repository.Settings'
    type: object
  categories.Tracker:
    properties:
      fin_health:
        $ref: '#/definitions/repository.FinHealth'
      goal:
        items:
          $ref: '#/definitions/repository.Goal'
        type: array
      tracking_state:
        $ref: '#/definitions/repository.TrackingState'
    type: object
  jsonresponse.AmountResponse:
    properties:
      amount:
        type: integer
      message:
        type: string
      status_code:
        type: integer
    type: object
  jsonresponse.CodeError:
    properties:
      error:
        type: string
      lock_duration:
        type: integer
      remaining_attempts:
        type: integer
      status_code:
        type: integer
    type: object
  jsonresponse.DoubleTokenResponse:
    properties:
      access_token:
        type: string
      access_token_life_time:
        type: integer
      message:
        type: string
      refresh_token:
        type: string
      refresh_token_life_time:
        type: integer
      status_code:
        type: integer
    type: object
  jsonresponse.ErrorResponse:
    properties:
      error:
        type: string
      status_code:
        type: integer
    type: object
  jsonresponse.IdResponse:
    properties:
      id:
        type: integer
      message:
        type: string
      status_code:
        type: integer
    type: object
  jsonresponse.SuccessResponse:
    properties:
      message:
        type: string
      status_code:
        type: integer
    type: object
  jsonresponse.TokenResponse:
    properties:
      message:
        type: string
      status_code:
        type: integer
      token:
        type: string
    type: object
  models.ConnectedAccount:
    properties:
      account_number:
        type: string
      account_type:
        type: string
      bank_id:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  openbanking.Auth:
    properties:
      token:
        type: string
    type: object
  repository.App:
    properties:
      category_settings:
        $ref: '#/definitions/repository.CategorySettings'
      connected_accounts:
        items:
          $ref: '#/definitions/models.ConnectedAccount'
        type: array
    type: object
  repository.CategorySettings:
    properties:
      expense_categories:
        items:
          $ref: '#/definitions/repository.ExpenseCategory'
        type: array
      income_categories:
        items:
          $ref: '#/definitions/repository.IncomeCategory'
        type: array
      investment_category:
        items:
          $ref: '#/definitions/repository.InvestmentCategory'
        type: array
    type: object
  repository.Expense:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        type: boolean
      sent_to:
        type: string
      user_id:
        type: string
    type: object
  repository.ExpenseCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  repository.FinHealth:
    properties:
      expense_score:
        type: integer
      id:
        type: string
      income_score:
        type: integer
      investment_score:
        type: integer
      obligation_score:
        type: integer
      plan_score:
        type: integer
      total_score:
        type: integer
      user_id:
        type: string
    type: object
  repository.GetTokenRequest:
    properties:
      auth_url:
        type: string
      client_id:
        type: string
      client_secret:
        type: string
    type: object
  repository.Goal:
    properties:
      currency:
        type: string
      current_state:
        type: number
      end_date:
        type: string
      goal:
        type: string
      id:
        type: string
      need:
        type: number
      start_date:
        type: string
      user_id:
        type: string
    type: object
  repository.Income:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        type: boolean
      sender:
        type: string
      user_id:
        type: string
    type: object
  repository.IncomeCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  repository.InvestmentCategory:
    properties:
      icon:
        type: string
      id:
        type: string
      is_constant:
        type: boolean
      name:
        type: string
      user_id:
        type: string
    type: object
  repository.Operation:
    properties:
      amount:
        type: number
      category:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      type:
        type: string
    type: object
  repository.Settings:
    properties:
      subscriptions:
        $ref: '#/definitions/repository.Subscription'
    type: object
  repository.Subscription:
    properties:
      end_date:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      start_date:
        type: string
      user_id:
        type: string
    type: object
  repository.TrackingState:
    properties:
      state:
        type: number
      user_id:
        type: string
    type: object
  repository.WealthFund:
    properties:
      amount:
        type: number
      bank_account:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      id:
        type: string
      planned:
        $ref: '#/definitions/repository.WelfareFund'
      user_id:
        type: string
    type: object
  repository.WelfareFund:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Planned
    - Unplanned
  token.ConfirmEmailRequest:
    properties:
      code:
        type: string
      token:
        type: string
    type: object
  token.Details:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
      refresh_token:
        type: string
    type: object
  user.ResetPasswordRequest:
    properties:
      email:
        type: string
    type: object
  user.UserProfile:
    properties:
      avatar_url:
        type: string
      name:
        type: string
      surname:
        description: '*changed'
        type: string
      user_id:
        type: string
    type: object
  v1.ConfirmResponse:
    properties:
      access_token_life_time:
        type: integer
      device_id:
        type: string
      message:
        type: string
      refresh_token_life_time:
        type: integer
      status_code:
        type: integer
      token_details:
        $ref: '#/definitions/token.Details'
    type: object
  v1.ConnectedAccountRequest:
    properties:
      account:
        $ref: '#/definitions/models.ConnectedAccount'
    type: object
  v1.EndTimeResponse:
    properties:
      end_date:
        type: string
      id:
        type: integer
      message:
        type: string
      status_code:
        type: integer
    type: object
  v1.ProfileAnalyticsResponse:
    properties:
      analytics:
        $ref: '#/definitions/categories.Analytics'
      currency:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  v1.ProfileArchiveResponse:
    properties:
      archive:
        items:
          $ref: '#/definitions/repository.Operation'
        type: array
      message:
        type: string
      status_code:
        type: integer
    type: object
  v1.ProfileMoreResponse:
    properties:
      message:
        type: string
      more:
        $ref: '#/definitions/categories.More'
      status_code:
        type: integer
    type: object
  v1.ProfileResponse:
    properties:
      message:
        type: string
      profile:
        $ref: '#/definitions/user.UserProfile'
      status_code:
        type: integer
    type: object
  v1.ProfileTrackerResponse:
    properties:
      currency:
        type: string
      message:
        type: string
      status_code:
        type: integer
      tracker:
        $ref: '#/definitions/categories.Tracker'
    type: object
  v1.RefreshToken:
    properties:
      refresh_token:
        type: string
    type: object
  v1.SupportRequest:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
      request_id:
        type: integer
      subject:
        type: string
      user_id:
        type: string
    type: object
  v1.UserAuthenticationRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  v1.UserPasswordReset:
    properties:
      email:
        type: string
      password:
        type: string
      reset_token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: wachrusz@gmail.com
    name: Mikhail Vakhrushin
  description: Backend API for managing user profiles, authentication, analytics,
    and more.
  termsOfService: http://swagger.io/terms/
  title: Cash Advisor API
  version: "0.1"
paths:
  /analytics/income:
    post:
      consumes:
      - application/json
      description: Create a new income record.
      parameters:
      - description: Income object
        in: body
        name: income
        required: true
        schema:
          $ref: '#/definitions/repository.Income'
      produces:
      - application/json
      responses:
        "201":
          description: Income created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating income
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create an income
      tags:
      - Analytics
  /analytics/wealth_fund:
    post:
      consumes:
      - application/json
      description: Create a new wealth fund.
      parameters:
      - description: Wealth fund object
        in: body
        name: wealthFund
        required: true
        schema:
          $ref: '#/definitions/repository.WealthFund'
      produces:
      - application/json
      responses:
        "201":
          description: Wealth fund created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating wealth fund
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create a wealth fund
      tags:
      - Analytics
  /app/accounts:
    delete:
      description: Delete an existing connected account.
      parameters:
      - description: ConnectedAccount object
        in: body
        name: ConnectedAccount
        required: true
        schema:
          $ref: '#/definitions/v1.ConnectedAccountRequest'
      responses:
        "204":
          description: Connected account deleted successfully
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error deleting connected account
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a connected account
      tags:
      - App
    post:
      consumes:
      - application/json
      description: Create a new connected account.
      parameters:
      - description: ConnectedAccount object
        in: body
        name: ConnectedAccount
        required: true
        schema:
          $ref: '#/definitions/v1.ConnectedAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Connected account created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error adding connected account
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create a connected account
      tags:
      - App
  /app/accounts/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing connected account.
      parameters:
      - description: Connected Account ID
        in: path
        name: id
        required: true
        type: string
      - description: ConnectedAccount object
        in: body
        name: ConnectedAccount
        required: true
        schema:
          $ref: '#/definitions/v1.ConnectedAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Connected account updated successfully
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "404":
          description: Connected account not found
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error updating connected account
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Update a connected account
      tags:
      - App
  /app/category/expense:
    post:
      consumes:
      - application/json
      description: Creates a new expense category in the database and returns its
        ID.
      parameters:
      - description: Expense category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/repository.ExpenseCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Expense category created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating expense category
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: CreateExpenseCategoryHandler an expense category
      tags:
      - App
  /app/category/income:
    post:
      consumes:
      - application/json
      description: Create a new income category.
      parameters:
      - description: Income category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/repository.IncomeCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Income category created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating income category
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create an income category
      tags:
      - App
  /app/category/investment:
    post:
      consumes:
      - application/json
      description: Create a new investment category.
      parameters:
      - description: Investment category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/repository.InvestmentCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Investment category created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating investment category
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create an investment category
      tags:
      - App
  /auth/login:
    post:
      consumes:
      - application/json
      description: LoginUserHandler to the system and get an authentication RefreshToken.
      parameters:
      - description: UserAuthenticationRequest object
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/v1.UserAuthenticationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: LoginUserHandler successful
          schema:
            $ref: '#/definitions/jsonresponse.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: LoginUserHandler to the system
      tags:
      - Auth
  /auth/login/confirm:
    post:
      consumes:
      - application/json
      description: Confirms the user's email for login using a RefreshToken and confirmation
        code.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed email for login
          schema:
            $ref: '#/definitions/v1.ConfirmResponse'
        "400":
          description: Invalid request or missing RefreshToken
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: Invalid code
          schema:
            $ref: '#/definitions/jsonresponse.CodeError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Confirm email for login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logs out the user, terminating the session.
      produces:
      - application/json
      responses:
        "200":
          description: LogoutUserHandler successful
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: LogoutUserHandler the user
      tags:
      - Auth
  /auth/password:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to request a password reset by providing
        their email. If the email is valid, a reset token will be sent to it.
      parameters:
      - description: Reset password request with email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent email with reset password token
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: Invalid Content-Type or invalid email
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Reset password
      tags:
      - Auth
    put:
      consumes:
      - application/json
      description: This endpoint enables users to change their password by providing
        their email, new password, and a valid reset token.
      parameters:
      - description: Password reset request with email, new password, and reset token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1.UserPasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: 'Invalid request: empty fields, invalid email, or password
            too short'
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: Invalid or expired reset token
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Change password for recovery
      tags:
      - Auth
  /auth/password/confirm:
    post:
      consumes:
      - application/json
      description: Confirms the password reset process using a RefreshToken and code.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed password reset
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: Unauthorized with remaining attempts
          schema:
            $ref: '#/definitions/jsonresponse.CodeError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Confirm password reset
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to refresh their access and refresh
        tokens using an existing refresh RefreshToken.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v1.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed tokens
          schema:
            $ref: '#/definitions/jsonresponse.DoubleTokenResponse'
        "400":
          description: Invalid Content-Type or request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Refresh authentication tokens
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and send confirmation email.
      parameters:
      - description: Credentials
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/v1.UserAuthenticationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/jsonresponse.TokenResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Register user
      tags:
      - Auth
  /auth/register/confirm:
    post:
      consumes:
      - application/json
      description: Confirms the user's email using a RefreshToken and confirmation
        code during registration.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmRequest
        required: true
        schema:
          $ref: '#/definitions/token.ConfirmEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed email
          schema:
            $ref: '#/definitions/v1.ConfirmResponse'
        "400":
          description: Invalid request or missing RefreshToken
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: Invalid code
          schema:
            $ref: '#/definitions/jsonresponse.CodeError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Confirm email
      tags:
      - Auth
  /auth/tokens:
    delete:
      consumes:
      - application/json
      description: This endpoint allows users to delete authentication tokens either
        by email or device ID. Only one of the parameters should be provided.
      parameters:
      - description: User email
        in: query
        name: email
        type: string
      - description: Device ID
        in: query
        name: deviceID
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted tokens
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "400":
          description: 'Invalid request: blank fields or both email and deviceID provided'
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Delete authentication tokens
      tags:
      - Auth
  /auth/tokens/amount:
    get:
      consumes:
      - application/json
      description: This endpoint returns the number of token pairs (active sessions)
        associated with the provided email.
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got the amount of token pairs
          schema:
            $ref: '#/definitions/jsonresponse.AmountResponse'
        "400":
          description: 'Invalid request: blank fields are not allowed'
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Get token pairs amount
      tags:
      - Auth
  /expenses:
    post:
      consumes:
      - application/json
      description: Create a new expense record.
      parameters:
      - description: Expense object
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/repository.Expense'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created an expense
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating expense
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create an expense
      tags:
      - Analytics
  /history/add:
    post:
      consumes:
      - application/json
      description: Create a new entry to the history.
      produces:
      - application/json
      responses:
        "200":
          description: History entry added successfully
          schema:
            type: string
      summary: Create history entry
      tags:
      - History
  /history/get:
    get:
      description: Get a list of history entries.
      produces:
      - application/json
      responses:
        "200":
          description: List of history entries
          schema:
            items:
              type: string
            type: array
      summary: Get history entries
      tags:
      - History
  /openbanking/accounts/get:
    get:
      consumes:
      - application/json
      description: Fetches a list of user accounts from the Open Banking API using
        the provided authorization token and API URL.
      parameters:
      - description: Authorization token for Open Banking
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/openbanking.Auth'
      - description: API base URL for Open Banking
        in: query
        name: api_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched accounts
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or missing URL parameter
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal service error while fetching accounts
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Retrieve user accounts
      tags:
      - OpenBanking
  /openbanking/consent/create:
    post:
      consumes:
      - application/json
      description: Initiates the consent process for accessing user accounts using
        the provided authorization token and API URL.
      parameters:
      - description: Authorization token for Open Banking
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/openbanking.Auth'
      - description: API base URL for Open Banking
        in: query
        name: api_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created consent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or missing URL parameter
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal service error while creating consent
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Create consent
      tags:
      - OpenBanking
  /openbanking/consent/delete:
    delete:
      consumes:
      - application/json
      description: Deletes existing consent for accessing user accounts using the
        provided authorization token, consent ID, and API URL.
      parameters:
      - description: Authorization token for Open Banking
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/openbanking.Auth'
      - description: API base URL for Open Banking
        in: query
        name: api_url
        required: true
        type: string
      - description: Consent ID to delete
        in: query
        name: consent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted consent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload, missing parameters, or incorrect ID
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal service error while deleting consent
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Delete consent
      tags:
      - OpenBanking
  /openbanking/consent/get:
    get:
      consumes:
      - application/json
      description: Fetches consent information using the provided authorization token,
        consent ID, and API URL.
      parameters:
      - description: Authorization token for Open Banking
        in: body
        name: Auth
        required: true
        schema:
          $ref: '#/definitions/openbanking.Auth'
      - description: API base URL for Open Banking
        in: query
        name: api_url
        required: true
        type: string
      - description: Consent ID to retrieve
        in: query
        name: consent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched consent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload, missing parameters, or incorrect ID
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Internal service error while fetching consent
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      summary: Retrieve consent
      tags:
      - OpenBanking
  /profile:
    get:
      description: Get the user profile for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/v1.ProfileResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error getting user profile
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Get user profile
      tags:
      - Profile
  /profile/analytics:
    get:
      consumes:
      - application/json
      description: This endpoint allows authenticated users to retrieve profile analytics
        data, filtered by date range and pagination parameters.
      parameters:
      - description: Currency code for analytics data (e.g., USD, EUR)
        in: header
        name: X-Currency
        required: true
        type: string
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Start date for analytics data (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for analytics data (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved analytics data
          schema:
            $ref: '#/definitions/v1.ProfileAnalyticsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error while fetching analytics data
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Get profile analytics
      tags:
      - Profile
  /profile/archive:
    get:
      consumes:
      - application/json
      description: This endpoint allows authenticated users to retrieve their archived
        operations with optional pagination.
      parameters:
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved operation archive
          schema:
            $ref: '#/definitions/v1.ProfileArchiveResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error while fetching operation archive
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Get operation archive
      tags:
      - Profile
  /profile/more:
    get:
      consumes:
      - application/json
      description: This endpoint allows authenticated users to retrieve additional
        profile data.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved additional profile data
          schema:
            $ref: '#/definitions/v1.ProfileMoreResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error while fetching additional data
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Get profile additional data
      tags:
      - Profile
  /profile/name:
    put:
      consumes:
      - application/json
      description: Update the user profile for the authenticated user with a new name
        and surname.
      parameters:
      - description: New name to be added to the profile
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/jsonresponse.SuccessResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error updating user profile
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Update user profile with name
      tags:
      - Profile
  /profile/tracker:
    get:
      consumes:
      - application/json
      description: This endpoint allows authenticated users to retrieve tracker data,
        with optional pagination parameters.
      parameters:
      - description: Currency code for tracker data (e.g., USD, EUR)
        in: header
        name: X-Currency
        required: true
        type: string
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved tracker data
          schema:
            $ref: '#/definitions/v1.ProfileTrackerResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Server error while fetching tracker data
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Get profile tracker
      tags:
      - Profile
  /settings/subscription:
    post:
      consumes:
      - application/json
      description: Create a new subscription record.
      parameters:
      - description: Subscription object
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/repository.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: Subscription created successfully
          schema:
            $ref: '#/definitions/v1.EndTimeResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating subscription
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create a subscription
      tags:
      - Settings
  /support/request:
    post:
      consumes:
      - application/json
      description: Send a support request to the technical support team.
      parameters:
      - description: Support request object
        in: body
        name: supportRequest
        required: true
        schema:
          $ref: '#/definitions/v1.SupportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Support request sent successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error sending support request
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Send support request
      tags:
      - Support
  /tracker/goal:
    post:
      consumes:
      - application/json
      description: Create a new goal.
      parameters:
      - description: Goal object
        in: body
        name: goal
        required: true
        schema:
          $ref: '#/definitions/repository.Goal'
      produces:
      - application/json
      responses:
        "201":
          description: Goal created successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error creating goal
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Create a goal
      tags:
      - Tracker
    put:
      consumes:
      - application/json
      description: Updates an existing goal.
      parameters:
      - description: Goal object
        in: body
        name: goal
        required: true
        schema:
          $ref: '#/definitions/repository.Goal'
      produces:
      - application/json
      responses:
        "201":
          description: Goal updated successfully
          schema:
            $ref: '#/definitions/jsonresponse.IdResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
        "500":
          description: Error updating goal
          schema:
            $ref: '#/definitions/jsonresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Update a goal
      tags:
      - Tracker
schemes:
- https
securityDefinitions:
  JWT:
    description: To authorize,
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
